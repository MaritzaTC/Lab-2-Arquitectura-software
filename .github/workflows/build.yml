#Workflow name
name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        run: mvn -B test

  sonar:
    # The Sonar's Job depends on another job named "tests", which should complete before this job starts.
    # needs: tests

    # Specifies that the job runs on the latest version of Ubuntu.
    runs-on: ubuntu-latest

    # The steps to execute as part of the job.
    steps:
      # This step checks out the repository so that it can be used by the workflow.
      - uses: actions/checkout@v1

      # This step sets up Java Development Kit version 11, which is required for running Java applications.
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # This step sets up caching for SonarCloud packages to speed up future runs.
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # This step sets up caching for Maven packages, which are dependencies of the Java project.
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # This step runs Maven to perform the SonarCloud analysis.
      - name: Analyze with SonarCloud
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=MaritzaTC_Lab-2-Arquitectura-software -Dsonar.organization=maritzatc -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #Build's job
  build:
    #Depends on sonar's job
    # needs: sonar
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v4
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      DEPLOY_PACKAGE: artifact.zip
    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
           name: artifact
           path: downloads
      
      - name: zip artifact
        run: |
          cd downloads
          zip ${{ env.DEPLOY_PACKAGE }} *
          cd ..

      - name: Get the version from pom.xml
        id: get_version
        run: echo ::set-output name=VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
      
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v22
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }} 
        with:
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ vars.APP_NAME }}
          environment_name: ${{ vars.ENV_NAME }}
          version_label: 1.0.6
          region: ${{ vars.AWS_REGION }}
          deployment_package: downloads/${{ env.DEPLOY_PACKAGE }}
          use_existing_version_if_available: true